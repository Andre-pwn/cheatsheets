xml external entity injection

vulnerabilità sul processo di dati XML
spesso permette di vedere file del backend file system e permette di intereagire con backend e applicazioni esterne con cui interagisce l'app vulnerabile.

in alcuni casi è possibile avanzare ad SSRF attraverso XXE

XML format usato per trasferimento di dati nel body delle richieste

di solito vengono usate librerie standard o API nel backend per elaborare il formato XML in dati leggibili

TIPI DI ATTACCO:
  - retrieve files
  - perform ssrf
  - exfiltrate data out-of-band
  - retrive data via error messages

struttura ad albero
DTD document type definition definisce la struttura di un documento XML
DTD dichiarata con DOCTYPE
DTD può essere contenuta già nel documento o importata da fonti esterne (external DTD) o ibrida.
custom entities possono essere definite nel DTD -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "http://normal-website.com" > ]>
per caricare entities da file esterno -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "file:///path/to/file" > ]>

XXE per leggere file remoti 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>

XXE per SSRF
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/"> ]>

HIDDEN ATTACK SURFACE for XXE injection
possibile surface in posti dove non è visibile l'xml

xinclude attack:
applicazioni possono ricevere dati submittati, salvarli in documenti xlm e poi parsare i files
backend soap request processata da soap request
non è possibile fare il classico attacco modificando il DOCTYPE
è però possibile usare XInclude, parte della specifica XML che consente ai documenti XML di essere buildati da altri sotto documenti.
XInclude può essere messo in qualsiasi data value

<foo xmlns:xi="http://www.w3.org/2001/XInclude">
<xi:include parse="text" href="file:///etc/passwd"/></foo>
